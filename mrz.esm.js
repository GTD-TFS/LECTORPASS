/**
 * Bundled by jsDelivr using Rollup v2.79.2 and Terser v5.39.0.
 * Original file: /npm/mrz@4.2.1/lib-esm/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const e={TD1:"TD1",TD2:"TD2",TD3:"TD3",SWISS_DRIVING_LICENSE:"SWISS_DRIVING_LICENSE",FRENCH_NATIONAL_ID:"FRENCH_NATIONAL_ID",FRENCH_DRIVING_LICENSE:"FRENCH_DRIVING_LICENSE"},n={AFG:"Afghanistan",ALB:"Albania",DZA:"Algeria",ASM:"American Samoa",AND:"Andorra",AGO:"Angola",AIA:"Anguilla",ATA:"Antarctica",ATG:"Antigua and Barbuda",ARG:"Argentina",ARM:"Armenia",ABW:"Aruba",AUS:"Australia",AUT:"Austria",AZE:"Azerbaijan",BHS:"Bahamas (the)",BHR:"Bahrain",BGD:"Bangladesh",BRB:"Barbados",BLR:"Belarus",BEL:"Belgium",BLZ:"Belize",BEN:"Benin",BMU:"Bermuda",BTN:"Bhutan",BOL:"Bolivia (Plurinational State of)",BES:"Bonaire, Sint Eustatius and Saba",BIH:"Bosnia and Herzegovina",BWA:"Botswana",BVT:"Bouvet Island",BRA:"Brazil",IOT:"British Indian Ocean Territory (the)",BRN:"Brunei Darussalam",BGR:"Bulgaria",BFA:"Burkina Faso",BDI:"Burundi",CPV:"Cabo Verde",KHM:"Cambodia",CMR:"Cameroon",CAN:"Canada",CYM:"Cayman Islands (the)",CAF:"Central African Republic (the)",TCD:"Chad",CHL:"Chile",CHN:"China",CXR:"Christmas Island",CCK:"Cocos (Keeling) Islands (the)",COL:"Colombia",COM:"Comoros (the)",COD:"Congo (the Democratic Republic of the)",COG:"Congo (the)",COK:"Cook Islands (the)",CRI:"Costa Rica",HRV:"Croatia",CUB:"Cuba",CUW:"Curaçao",CYP:"Cyprus",CZE:"Czechia",CIV:"Côte d'Ivoire",DNK:"Denmark",DJI:"Djibouti",DMA:"Dominica",DOM:"Dominican Republic (the)",ECU:"Ecuador",EGY:"Egypt",SLV:"El Salvador",GNQ:"Equatorial Guinea",ERI:"Eritrea",EST:"Estonia",SWZ:"Eswatini",ETH:"Ethiopia",FLK:"Falkland Islands (the) [Malvinas]",FRO:"Faroe Islands (the)",FJI:"Fiji",FIN:"Finland",FRA:"France",GUF:"French Guiana",PYF:"French Polynesia",ATF:"French Southern Territories (the)",GAB:"Gabon",GMB:"Gambia (the)",GEO:"Georgia",DEU:"Germany",GHA:"Ghana",GIB:"Gibraltar",GRC:"Greece",GRL:"Greenland",GRD:"Grenada",GLP:"Guadeloupe",GUM:"Guam",GTM:"Guatemala",GGY:"Guernsey",GIN:"Guinea",GNB:"Guinea-Bissau",GUY:"Guyana",HTI:"Haiti",HMD:"Heard Island and McDonald Islands",VAT:"Holy See (the)",HND:"Honduras",HKG:"Hong Kong",HUN:"Hungary",ISL:"Iceland",IND:"India",IDN:"Indonesia",IRN:"Iran (Islamic Republic of)",IRQ:"Iraq",IRL:"Ireland",IMN:"Isle of Man",ISR:"Israel",ITA:"Italy",JAM:"Jamaica",JPN:"Japan",JEY:"Jersey",JOR:"Jordan",KAZ:"Kazakhstan",KEN:"Kenya",KIR:"Kiribati",PRK:"Korea (the Democratic People's Republic of)",KOR:"Korea (the Republic of)",KWT:"Kuwait",KGZ:"Kyrgyzstan",LAO:"Lao People's Democratic Republic (the)",LVA:"Latvia",LBN:"Lebanon",LSO:"Lesotho",LBR:"Liberia",LBY:"Libya",LIE:"Liechtenstein",LTU:"Lithuania",LUX:"Luxembourg",MAC:"Macao",MDG:"Madagascar",MWI:"Malawi",MYS:"Malaysia",MDV:"Maldives",MLI:"Mali",MLT:"Malta",MHL:"Marshall Islands (the)",MTQ:"Martinique",MRT:"Mauritania",MUS:"Mauritius",MYT:"Mayotte",MEX:"Mexico",FSM:"Micronesia (Federated States of)",MDA:"Moldova (the Republic of)",MCO:"Monaco",MNG:"Mongolia",MNE:"Montenegro",MSR:"Montserrat",MAR:"Morocco",MOZ:"Mozambique",MMR:"Myanmar",NAM:"Namibia",NRU:"Nauru",NPL:"Nepal",NLD:"Netherlands (the)",NCL:"New Caledonia",NZL:"New Zealand",NIC:"Nicaragua",NER:"Niger (the)",NGA:"Nigeria",NIU:"Niue",NFK:"Norfolk Island",MKD:"North Macedonia",MNP:"Northern Mariana Islands (the)",NOR:"Norway",OMN:"Oman",PAK:"Pakistan",PLW:"Palau",PSE:"Palestine, State of",PAN:"Panama",PNG:"Papua New Guinea",PRY:"Paraguay",PER:"Peru",PHL:"Philippines (the)",PCN:"Pitcairn",POL:"Poland",PRT:"Portugal",PRI:"Puerto Rico",QAT:"Qatar",ROU:"Romania",RUS:"Russian Federation (the)",RWA:"Rwanda",REU:"Réunion",BLM:"Saint Barthélemy",SHN:"Saint Helena, Ascension and Tristan da Cunha",KNA:"Saint Kitts and Nevis",LCA:"Saint Lucia",MAF:"Saint Martin (French part)",SPM:"Saint Pierre and Miquelon",VCT:"Saint Vincent and the Grenadines",WSM:"Samoa",SMR:"San Marino",STP:"Sao Tome and Principe",SAU:"Saudi Arabia",SEN:"Senegal",SRB:"Serbia",SYC:"Seychelles",SLE:"Sierra Leone",SGP:"Singapore",SXM:"Sint Maarten (Dutch part)",SVK:"Slovakia",SVN:"Slovenia",SLB:"Solomon Islands",SOM:"Somalia",ZAF:"South Africa",SGS:"South Georgia and the South Sandwich Islands",SSD:"South Sudan",ESP:"Spain",LKA:"Sri Lanka",SDN:"Sudan (the)",SUR:"Suriname",SJM:"Svalbard and Jan Mayen",SWE:"Sweden",CHE:"Switzerland",SYR:"Syrian Arab Republic (the)",TWN:"Taiwan (Province of China)",TJK:"Tajikistan",TZA:"Tanzania, the United Republic of",THA:"Thailand",TLS:"Timor-Leste",TGO:"Togo",TKL:"Tokelau",TON:"Tonga",TTO:"Trinidad and Tobago",TUN:"Tunisia",TUR:"Turkey",TKM:"Turkmenistan",TCA:"Turks and Caicos Islands (the)",TUV:"Tuvalu",UGA:"Uganda",UKR:"Ukraine",ARE:"United Arab Emirates (the)",GBR:"United Kingdom of Great Britain and Northern Ireland (the)",UMI:"United States Minor Outlying Islands (the)",USA:"United States of America (the)",URY:"Uruguay",UZB:"Uzbekistan",VUT:"Vanuatu",VEN:"Venezuela (Bolivarian Republic of)",VNM:"Viet Nam",VGB:"Virgin Islands (British)",VIR:"Virgin Islands (U.S.)",WLF:"Wallis and Futuna",ESH:"Western Sahara*",YEM:"Yemen",ZMB:"Zambia",ZWE:"Zimbabwe",ALA:"Åland Islands",GBD:"British Overseas Territories Citizen",GBN:"British National (Overseas)",GBO:"British Overseas Citizen",GBS:"British Subject",GBP:"British Protected Person",RKS:"Republic of Kosovo",D:"Germany",XXK:"Kosovo",EUE:"European Union (EU)",UNO:"United Nations Organization or one of its officials",UNA:"United Nations specialized agency or one of its officials",UNK:"Resident of Kosovo to whom a travel document has been issued by the United Nations Interim Administration Mission in Kosovo (UNMIK)",XBA:"African Development Bank (ADB)",XIM:"African Export-Import Bank (AFREXIM bank)",XCC:"Caribbean Community or one of its emissaries (CARICOM)",XCE:"Council of Europe",XCO:"Common Market for Eastern and Southern Africa (COMESA)",XEC:"Economic Community of West African States (ECOWAS)",XPO:"International Criminal Police Organization (INTERPOL)",XES:"Organization of Eastern Caribbean States (OECS)",XOM:"Sovereign Military Order of Malta or one of its emissaries",XDC:"Southern African Development Community",XXA:"Stateless person, as defined in Article 1 of the 1954 Convention Relating to the Status of Stateless Persons",XXB:"Refugee, as defined in Article 1 of the 1951 Convention Relating to the Status of Refugees as amended by the 1967 Protocol",XXC:"Refugee, other than as defined under the code XXB above",XXX:"Person of unspecified nationality, for whom issuing State does not consider it necessary to specify any of the codes XXA, XXB or XXC above, whatever that person’s status may be. This category may include a person who is neither stateless nor a refugee but who is of unknown nationality and legally residing in the State of issue.",ANT:"Netherlands Antilles",NTZ:"Neutral Zone"};Object.freeze(n);const t=["A","B","D"];function r(e){return e.replace(/<+$/g,"").replace(/</g," ")}function a(e){if(!e.match(/^[A-Z<]+$/))throw new Error(`invalid text: ${e}. Must be only alphabetical with <`);return r(e)}function i(e,n,t=/^[0-9A-Z<]+$/){const a=r(e);if(!t.test(e))throw new o(`invalid text: ${e}. Must match the following regular expression: ${t.toString()}`,a,n,n+a.length);return a}class o extends Error{constructor(e,n,t,r){super(e),this.value=n,this.start=t,this.end=r}}const s={8:"B",6:"G",0:"O",1:"I",5:"S",2:"Z"},l={B:"8",G:"6",O:"0",I:"1",S:"5",Z:"2"};function d(e,n){let t="";const r=[];return e.split("").forEach(((e,a)=>{if(n.type===u.ALPHABETIC){const i=function(e){return s[e]?s[e]:e}(e);i!==e&&r.push({line:n.line,column:n.start+a,original:e,corrected:i}),t+=i}else if(n.type===u.NUMERIC){const i=function(e){return l[e]?l[e]:e}(e);i!==e&&r.push({line:n.line,column:n.start+a,original:e,corrected:i}),t+=i}else t+=e})),{correctedText:t,autocorrect:r}}const u={NUMERIC:"NUMERIC",ALPHABETIC:"ALPHABETIC",ALPHANUMERIC:"ALPHANUMERIC"};function c(e){f(e,"label","string"),null!==e.field&&f(e,"field","string"),f(e,"line","number"),f(e,"start","number"),f(e,"end","number"),f(e,"parser","function");const n={line:e.line,start:e.start,end:e.end},t=[n];if(Array.isArray(e.related))for(const n of e.related)f(n,"line","number"),f(n,"start","number"),f(n,"end","number"),t.push(n);return{parser:(n,r)=>{const a=h(n,e),i=(e.related||[]).map((e=>h(n,e))),s={label:e.label,field:e.field,value:null,valid:!1,ranges:t.map((e=>({...e,raw:h(n,e)}))),line:0,start:0,end:0,autocorrect:[]},l=s.ranges[0];s.line=l.line,s.start=l.start,s.end=l.end;try{const n=e.parser(a,...i);s.value="object"==typeof n?n.value:n,s.valid=!0,"object"==typeof n&&(s.start=l.start+n.start,s.end=l.start+n.end)}catch(e){s.error=e.message,e instanceof o&&(s.value=e.value,s.start=l.start+e.start,s.end=l.start+e.end)}for(const e of r)e.line===s.line&&e.column>=s.start&&e.column<s.end&&s.autocorrect.push(e);return s},autocorrector:t=>({...d(h(t,e),e),range:n})}}function h(e,n){return e[n.line].substring(n.start,n.end)}function f(e,n,t){if(typeof e[n]!==t)throw new TypeError(`${n} must be a ${t}`)}function m(e,n){let t=0;const r=[7,3,1];for(let n=0;n<e.length;n++){let a=e.charCodeAt(n);60===a&&(a=0),a>=65&&(a-=55),a>=48&&(a-=48),a*=r[n%3],t+=a}if(t%=10,t!==Number(n))throw new Error(`invalid check digit: ${n}. Must be ${t}`)}function b(e){if(!e.match(/^[0-9<]{4,6}$/))throw new Error(`invalid date: ${e}`);const n=e.substring(2,4);if("<<"!==n&&(parseInt(n,10)<1||parseInt(n,10)>12))throw new Error(`invalid date month: ${n}`);if(6===e.length){const n=e.substring(4,6);if("<<"!==n&&(parseInt(n,10)<1||parseInt(n,10)>31))throw new Error(`invalid date day: ${n}`)}return e}function g(e,n){return m(n,e),e}function p(e){e=r(e);if(!n[e])throw new Error(`invalid state code: ${e}`);return{value:e,start:0,end:e.length}}const E={label:"Document number",field:"documentNumber",parser:function(e,n,t){let a,i;if("<"===n&&t){const n=t.indexOf("<");i=e+t.substring(0,n-1),a=i.length+1}else i=r(e),a=i.length;return{value:i,start:0,end:a}},type:u.ALPHANUMERIC},A={label:"Document number check digit",field:"documentNumberCheckDigit",parser:function(e,n,t){if("<"===e&&t){const r=t.indexOf("<");return m(n=`${n}<${t.substring(0,r-1)}`,e=t.charAt(r-1)),{value:e,start:r,end:r+1}}return m(n,e),e},type:u.NUMERIC},I={label:"Document code",field:"documentCode",type:u.ALPHABETIC},N={label:"Document code",field:"documentCode",type:u.ALPHANUMERIC},C={label:"Nationality",field:"nationality",parser:p,type:u.ALPHABETIC},S={label:"Sex",field:"sex",parser:function(e){switch(e){case"M":return"male";case"F":return"female";case"<":return"nonspecified";default:throw new Error(`invalid sex: ${e}. Must be M, F or <.`)}},type:u.ALPHABETIC},M={label:"Expiration date",field:"expirationDate",parser:b,type:u.NUMERIC},w={label:"Expiration date check digit",field:"expirationDateCheckDigit",parser:g,type:u.NUMERIC},v={label:"Composite check digit",field:"compositeCheckDigit",parser:function(e,...n){return m(n.join(""),e),e},type:u.NUMERIC},R={label:"Birth date",field:"birthDate",parser:b,type:u.NUMERIC},T={label:"Birth date check digit",field:"birthDateCheckDigit",parser:g,type:u.NUMERIC},B={label:"Issue date",field:"issueDate",parser:b,type:u.NUMERIC},D={label:"First name",field:"firstName",parser:function(e){const n=e.replace(/.*?<{2}/,""),t=i(n,e.length-n.length,/^[A-Z<]+<*$/),r=e.length-n.length;return{value:t,start:r,end:r+t.length}},type:u.ALPHABETIC},L={label:"Last name",field:"lastName",parser:function(e){const n=i(e.replace(/<{2}.*$/,""),0,/^[A-Z<]*<*$/);return{value:n,start:0,end:n.length}},type:u.ALPHABETIC},y={label:"Issuing state",field:"issuingState",parser:p,type:u.ALPHABETIC};var $=[{...N,line:0,start:0,end:2,parser:function(e){if(2!==e.length)throw new Error(`invalid document code: ${e}. must be 2 char length`);const[n,r]=e;return function(e,n){if(!t.includes(e)){const e=new Intl.ListFormat("en-US",{style:"short",type:"disjunction"});throw new Error(`invalid document code: ${n}. First character must be ${e.format(t)}`)}}(n,e),function(e,n){const t=parseInt(e,10);if(Number.isNaN(t))throw new Error(`invalid document code number: ${n}. Second character must be a number`)}(r,e),`${n}${r}`}},{...y,line:0,start:2,end:5},{...E,line:0,start:5,end:14},{...A,line:0,start:14,end:15,related:[{line:0,start:0,end:14}]},{...M,line:0,start:15,end:21},{...L,line:0,start:21,end:29,parser:a},{...v,line:0,start:29,end:30,related:[{line:0,start:0,end:29}]}].map(c);function G(e,n){switch(e){case"TD1":case"TD2":case"TD3":case"FRENCH_DRIVING_LICENSE":return P(n.documentNumber);case"FRENCH_NATIONAL_ID":return P(n.issueDate,n.administrativeCode2,n.documentNumber);case"SWISS_DRIVING_LICENSE":return P(n.pinCode,n.versionNumber);default:!function(e){throw new Error(`unrecognized format: ${e}`)}(e)}}function P(...e){let n="";for(const t of e){if(!t)return null;n+=t}return n}function U(e,n,t,r){const{autocorrect:a=!1}=r,{corrected:i,autocorrectArray:o}=function(e,n,t){const r=e.slice();let a=[];return t?n.forEach((({autocorrector:n})=>{const{autocorrect:t,correctedText:i,range:o}=n(e);a.push(t);const s=r[o.line];r[o.line]=s.slice(0,o.start)+i+s.slice(o.end)})):a=new Array(n.length).fill([]),{corrected:r,autocorrectArray:a}}(n,t,a),s=function(e,n,t){const r=[];return n.forEach((({parser:n},a)=>{r.push(n(e,t[a]))})),r}(i,t,o),l=function(e){const n={};let t=!0;for(const r of e)r.valid||(t=!1),r.field&&(n[r.field]=r.valid?r.value:null);return{fields:n,allValid:t}}(s);return{format:e,details:s,fields:l.fields,documentNumber:G(e,l.fields),valid:l.allValid}}const O=e.FRENCH_DRIVING_LICENSE;function F(e){const n=e.charAt(0);if("A"!==n&&"C"!==n&&"I"!==n)throw new Error(`invalid document code: ${e}. First character must be A, C or I`);const t=e.charAt(1);if("V"===t)throw new Error(`invalid document code: ${e}. Second character may not be V`);return"<"===t?{value:n,start:0,end:1}:e}function H(e){const n=i(e,0);return{value:n,start:0,end:n.length}}var K=[{...I,line:0,start:0,end:2,parser:F},{...y,line:0,start:2,end:5},{...L,line:0,start:5,end:30,parser:a},{label:"Administrative code",field:"administrativeCode",line:0,start:30,end:36,parser:H},{...B,line:1,start:0,end:4},{label:"Administrative code 2",field:"administrativeCode2",line:1,start:4,end:7,parser:H},{...E,line:1,start:7,end:12},{...A,line:1,start:12,end:13,related:[{line:1,start:0,end:12}]},{...D,line:1,start:13,end:27,parser:a},{...R,line:1,start:27,end:33},{...T,line:1,start:33,end:34,related:[{line:1,start:27,end:33}]},{...S,line:1,start:34,end:35},{...v,line:1,start:35,end:36,related:[{line:0,start:0,end:36},{line:1,start:0,end:35}]}].map(c);const V=e.FRENCH_NATIONAL_ID;function X(e){if(!e.match(/^[0-9]+$/))throw new Error(`invalid number: ${e}`);return e}function k(e){if(!e.match(/^<*$/))throw new Error(`invalid separator: ${e}. Must be composed only of "<"`);return e}function Z(e){switch(e){case"D":case"F":case"I":case"R":return e;default:throw new Error(`invalid languageCode code: ${e}. Must be D, F, I or R`)}}var _=[{...E,line:0,start:0,end:9,parser:function(e){const n=e.substring(0,3),t=e.substring(3,6),r=e.charAt(6),a=e.substring(7);if(!n.match(/^[A-Z0-9]{3}$/))throw new Error(`invalid document number: ${e}. Must start with three alphanumeric digits`);if(!t.match(/^[0-9]{3}$/))throw new Error(`invalid document number: ${e}. Must have numeric digits in positions 4, 5 and 6`);if("<<"!==a)throw new Error(`invalid document number: ${e}. Must end with <<`);return Z(r),{value:e.substring(0,7),start:0,end:7}}},{label:"Language code",field:"languageCode",line:0,start:6,end:7,parser:Z,type:u.ALPHABETIC},{...I,line:1,start:0,end:2,parser:function(e){if("FA"!==e)throw new Error(`invalid document code: ${e}. Must be FA`);return e}},{...y,line:1,start:2,end:5,parser:function(e){if("CHE"!==e&&"LIE"!==e)throw new Error(`invalid state code: ${e}. Must be CHE or LIE`);return e}},{label:"PIN code",field:"pinCode",line:1,start:5,end:14,parser:X,type:u.NUMERIC},{label:"Version number",field:"versionNumber",line:1,start:14,end:17,parser:X,type:u.NUMERIC},{label:"Separator 1",field:null,line:1,start:17,end:19,parser:k},{...R,line:1,start:19,end:25},{label:"Separator 2",field:null,line:1,start:25,end:30,parser:k},{...L,line:2,start:0,end:30},{...D,line:2,start:0,end:30}].map(c);const z=e.SWISS_DRIVING_LICENSE;var x=[{...I,line:0,start:0,end:2,parser:F},{...y,line:0,start:2,end:5},{...E,line:0,start:5,end:14,related:[{line:0,start:14,end:15},{line:0,start:15,end:30}]},{...A,line:0,start:14,end:15,related:[{line:0,start:5,end:14},{line:0,start:15,end:30}]},{label:"Optional field 1",field:"optional1",line:0,start:15,end:30,related:[{line:0,start:5,end:14},{line:0,start:14,end:15}],parser:function(e,n){if("<"===n){const n=e.indexOf("<"),t=i(e.substring(n+1),n+1);return{value:t,start:n+1,end:n+1+t.length}}{const n=i(e,0);return{value:n,start:0,end:n.length}}}},{...R,start:0,end:6,line:1},{...T,line:1,start:6,end:7,related:[{line:1,start:0,end:6}]},{...S,line:1,start:7,end:8},{...M,line:1,start:8,end:14},{...w,line:1,start:14,end:15,related:[{line:1,start:8,end:14}]},{...C,line:1,start:15,end:18},{label:"Optional field 2",field:"optional2",line:1,start:18,end:29,parser:H},{...v,line:1,start:29,end:30,related:[{line:0,start:5,end:30},{line:1,start:0,end:7},{line:1,start:8,end:15},{line:1,start:18,end:29}]},{...L,line:2,start:0,end:30},{...D,line:2,start:0,end:30}].map(c);const W=e.TD1;var Y=[{...I,line:0,start:0,end:2,parser:F},{...y,line:0,start:2,end:5},{...L,line:0,start:5,end:36},{...D,line:0,start:5,end:36},{...E,line:1,start:0,end:9,related:[{line:1,start:9,end:10},{line:1,start:28,end:35}]},{...A,line:1,start:9,end:10,related:[{line:1,start:0,end:9},{line:1,start:28,end:35}]},{...C,line:1,start:10,end:13},{...R,line:1,start:13,end:19},{...T,line:1,start:19,end:20,related:[{line:1,start:13,end:19}]},{...S,line:1,start:20,end:21},{...M,line:1,start:21,end:27},{...w,line:1,start:27,end:28,related:[{line:1,start:21,end:27}]},{label:"Optional field",field:"optional",line:1,start:28,end:35,parser:H},{...v,line:1,start:35,end:36,related:[{line:1,start:0,end:10},{line:1,start:13,end:20},{line:1,start:21,end:35}]}].map(c);const J=e.TD2;var j=[{...I,line:0,start:0,end:2,parser:function(e){const n=e.charAt(0);if("P"!==n)throw new Error(`invalid document code: ${e}. First character must be P`);const t=e.charAt(1);if(!t.match(/[A-Z<]/))throw new Error(`invalid document code: ${e}. Second character must be a letter or <`);return"<"===t?{value:n,start:0,end:1}:e}},{...y,line:0,start:2,end:5},{...L,line:0,start:5,end:44},{...D,line:0,start:5,end:44},{...E,line:1,start:0,end:9},{...A,line:1,start:9,end:10,related:[{line:1,start:0,end:9}]},{...C,line:1,start:10,end:13},{...R,line:1,start:13,end:19},{...T,line:1,start:19,end:20,related:[{line:1,start:13,end:19}]},{...S,line:1,start:20,end:21},{...M,line:1,start:21,end:27},{...w,line:1,start:27,end:28,related:[{line:1,start:21,end:27}]},{label:"Personal number",field:"personalNumber",line:1,start:28,end:42,parser:function(e){const n=i(e,0,/^[A-Z0-9<]+<*$/);return{value:n,start:0,end:n.length}}},{label:"Personal number check digit",field:"personalNumberCheckDigit",line:1,start:42,end:43,related:[{line:1,start:28,end:42}],parser:function(e,n){if(""===r(n)){if("<"!==e&&"0"!==e)throw new Error(`invalid check digit ${e}: must be 0 or <`);return e}return m(n,e),e}},{...v,line:1,start:43,end:44,related:[{line:1,start:0,end:10},{line:1,start:13,end:20},{line:1,start:21,end:43}]}].map(c);const q=e.TD3;const Q={td1:function(e,n){if(3!==e.length)throw new Error(`invalid number of lines: ${e.length}: Must be 3 for ${W}`);return e.forEach(((e,n)=>{if(30!==e.length)throw new Error(`invalid number of characters for line ${n+1}: ${e.length}. Must be 30 for ${W}`)})),U(W,e,x,n)},td2:function(e,n){if(2!==e.length)throw new Error(`invalid number of lines: ${e.length}: Must be 2 for ${J}`);return e.forEach(((e,n)=>{if(36!==e.length)throw new Error(`invalid number of characters for line ${n+1}: ${e.length}. Must be 36 for TD2`)})),U(J,e,Y,n)},td3:function(e,n){if(2!==e.length)throw new Error(`invalid number of lines: ${e.length}: Must be 2 for ${q}`);return e.forEach(((e,n)=>{if(44!==e.length)throw new Error(`invalid number of characters for line ${n+1}: ${e.length}. Must be 44 for TD3`)})),U(q,e,j,n)},swissDrivingLicense:function(e,n){if(3!==e.length)throw new Error(`invalid number of lines: ${e.length}: Must be 3 for ${z}`);if(9!==e[0].length)throw new Error(`invalid number of characters for line 1: ${e[0].length}. Must be 9 for ${z}`);if(30!==e[1].length)throw new Error(`invalid number of characters for line 2: ${e[1].length}. Must be 30 for ${z}`);if(30!==e[2].length)throw new Error(`invalid number of characters for line 3: ${e[2].length}. Must be 30 for ${z}`);return U(z,e,_,n)},frenchNationalId:function(e,n){if(2!==e.length)throw new Error(`invalid number of lines: ${e.length}: Must be 2 for ${V}`);return e.forEach(((e,n)=>{if(36!==e.length)throw new Error(`invalid number of characters for line ${n+1}: ${e.length}. Must be 36 for ${V}`)})),U(V,e,K,n)},frenchDrivingLicense:function(e,n){if(1!==e.length)throw new Error(`invalid number of lines: ${e.length}: Must be 1 for ${O}`);if(30!==e[0].length)throw new Error(`invalid number of characters for line 1: ${e[0].length}. Must be 30 for ${O}`);return U(O,e,$,n)}};function ee(e,n={}){const t=function(e){if("string"==typeof e&&(e=e.split(/[\r\n]+/)),!Array.isArray(e))throw new TypeError("input must be an array or string");for(const n of e)if(!n.match(/[A-Z0-9<]+/))throw new TypeError('lines must be composed of only alphanumerical characters and "<"');return e}(e);switch(t.length){case 1:if(30===t[0].length)return Q.frenchDrivingLicense(t,n);throw new Error(`unrecognized document format. First line of input must have 30 (French Driving License) characters and it has a length of ${t[0].length}`);case 2:case 3:switch(t[0].length){case 30:return Q.td1(t,n);case 36:return t[0].substring(30,35).match(/[0-9]/)||t[0].match(/^IDFRA/)?Q.frenchNationalId(t,n):Q.td2(t,n);case 44:return Q.td3(t,n);case 9:return Q.swissDrivingLicense(t,n);default:throw new Error(`unrecognized document format. First line of input must have 30 (TD1), 36 (TD2 or French National Id), 44 (TD3) or 9 (Swiss Driving License) characters and it has a length of ${t[0].length}`)}default:throw new Error(`unrecognized document format. Input must have one, two or three lines, found ${t.length}`)}}export{e as formats,ee as parse,n as states};export default null;
//# sourceMappingURL=/sm/690dcbb2d53bb4f2d8399c96b48aa901eedfd53248b5daf29286d9b5d4612dd7.map